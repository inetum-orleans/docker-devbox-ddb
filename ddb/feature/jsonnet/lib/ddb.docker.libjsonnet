local _docker_registry_name = std.extVar("jsonnet.docker.registry.name");
local _docker_registry_repository = std.extVar("jsonnet.docker.registry.repository");
local _docker_service_restart = std.extVar("jsonnet.docker.service.restart");
local _docker_user_uid = std.extVar("jsonnet.docker.user.uid");
local _docker_user_gid = std.extVar("jsonnet.docker.user.gid");
local _docker_user_name_to_uid = std.extVar("jsonnet.docker.user.name_to_uid");
local _docker_user_group_to_gid = std.extVar("jsonnet.docker.user.group_to_gid");
local _docker_path_mapping = std.extVar("docker.path_mapping");
local _docker_xdebug_host = std.extVar("jsonnet.docker.xdebug.host");
local _docker_xdebug_disabled = std.extVar("jsonnet.docker.xdebug.disabled");
local _docker_xdebug_mode = std.extVar("jsonnet.docker.xdebug.mode");
local _docker_xdebug_session = std.extVar("jsonnet.docker.xdebug.session");
local _docker_xdebug_version = std.extVar("jsonnet.docker.xdebug.version");
local _docker_build_cache_from_image = std.extVar("jsonnet.docker.build.cache_from_image");
local _docker_build_image_tag = std.extVar("jsonnet.docker.build.image_tag");
local _docker_build_context_base_directory = std.extVar("jsonnet.docker.build.context.base_directory");
local _docker_build_context_use_project_home = std.extVar("jsonnet.docker.build.context.use_project_home");
local _docker_compose_version = std.extVar("jsonnet.docker.compose.version");
local _docker_networks_names = std.extVar("jsonnet.docker.networks.names");
local _docker_service_init = std.extVar("jsonnet.docker.service.init");
local _docker_virtualhost_disabled = std.extVar("jsonnet.docker.virtualhost.disabled");
local _docker_binary_disabled = std.extVar("jsonnet.docker.binary.disabled");
local _docker_binary_global = std.extVar("jsonnet.docker.binary.global");
local _docker_virtualhost_type = std.extVar("jsonnet.docker.virtualhost.type");
local _docker_virtualhost_disabled = std.extVar("jsonnet.docker.virtualhost.disabled");
local _docker_virtualhost_network_id = std.extVar("jsonnet.docker.virtualhost.network_id");
local _docker_virtualhost_certresolver = std.extVar("jsonnet.docker.virtualhost.certresolver");
local _docker_virtualhost_https = std.extVar("jsonnet.docker.virtualhost.https");
local _docker_virtualhost_redirect_to_https = std.extVar("jsonnet.docker.virtualhost.redirect_to_https");
local _docker_virtualhost_redirect_to_path_prefix = std.extVar("jsonnet.docker.virtualhost.redirect_to_path_prefix");
local _docker_compose_excluded_services = std.extVar("jsonnet.docker.compose.excluded_services");
local _docker_compose_included_services = std.extVar("jsonnet.docker.compose.included_services");
local _docker_expose_disabled = std.extVar("jsonnet.docker.expose.disabled");
local _docker_expose_port_prefix = std.extVar("jsonnet.docker.expose.port_prefix");
local _docker_mount_disabled = std.extVar("jsonnet.docker.mount.disabled");
local _docker_mount_directory = std.extVar("jsonnet.docker.mount.directory");
local _docker_mount_directories = std.extVar("jsonnet.docker.mount.directories");
local _core_project_name = std.extVar("core.project.name");
local _core_os = std.extVar("core.os");
local _core_env_current = std.extVar("core.env.current");
local _core_env_available = std.extVar("core.env.available");
local _core_path_project_home = std.extVar("core.path.project_home");
local _core_path_ddb_home = std.extVar("core.path.ddb_home");
local _core_path_home = std.extVar("core.path.home");

local mapPath(path) =
  local key = std.filter(function(mapping_field) std.startsWith(path, mapping_field), std.objectFields(_docker_path_mapping));
  if std.length(key) > 0 then _docker_path_mapping[key[0]] + std.substr(path, std.length(_docker_path_mapping[key[0]]), std.length(path)) else path;

local path = {
    map: mapPath,
    project: mapPath(_core_path_project_home),
    project_home: mapPath(_core_path_project_home),
    ddb_home: mapPath(_core_path_ddb_home),
    home: mapPath(_core_path_home)
};

local File(thisFile) =
	local splitFile = if std.isArray(thisFile) then thisFile else std.split(thisFile, "/");

	local name = splitFile[std.length(splitFile) - 1];
	if std.length(splitFile) >= 2 then
		local parent = std.slice(splitFile, 0, std.length(splitFile) - 1, 1);
		{
		  name: name,
		  parent: File(parent)
		}
	else
		{name: name};

local Service(restart=_docker_service_restart, init=_docker_service_init) = {
    [ if restart != null then "restart"]: restart,
    [ if init then "init"]: true,
};

local Image(image=null, restart=_docker_service_restart, init=_docker_service_init) = Service(restart, init) + {
    [if image != null then "image"]: image
};

local image_uri(image_name, image_tag=_docker_build_image_tag, registry_name=_docker_registry_name, registry_repository=_docker_registry_repository) =
    local image_uri = std.join('/', std.filter(function(s) s != null, [registry_name, registry_repository, image_name]));
    if image_tag != null then image_uri + ':' + image_tag else image_uri;

local NoExpose(container_port, host_port_suffix = null, protocol = null, port_prefix=null, expose=false) = {};
local Expose(container_port, host_port_suffix = null, protocol = null, port_prefix=_docker_expose_port_prefix, expose=false) =
    local container_port_str = std.toString(container_port);
    local effective_protocol = if protocol == null then "" else "/" + protocol;
    if std.length(std.findSubstr(":", container_port_str)) > 0 then
		{
			ports+: [container_port_str + effective_protocol]
		}
    else
		local host_port_suffix_str = if host_port_suffix == null then null else std.toString(host_port_suffix);
		local effective_host_port_suffix = if host_port_suffix_str == null then std.substr(container_port_str, std.length(container_port_str) - 2, 2) else host_port_suffix_str;
		{
			ports+: [
				port_prefix + effective_host_port_suffix + ":" + container_port + effective_protocol
			]
		};

local Build(name,
            image=name,
            cache_from_image=_docker_build_cache_from_image,
            context_base_directory=_docker_build_context_base_directory,
            context_use_project_home=_docker_build_context_use_project_home,
            restart=_docker_service_restart,
            init=_docker_service_init,
            registry_name=_docker_registry_name,
            registry_repository=_docker_registry_repository,
            image_tag=_docker_build_image_tag) = Service(restart, init) + {
    "build": {
        [if (cache_from_image && (registry_name != null || registry_repository != null)) then "cache_from"]: [
            image_uri(image, image_tag, registry_name, registry_repository)
        ]
    }
    +
    (if context_use_project_home then {
        "context": ".",
        "dockerfile": std.join("/", [context_base_directory, image, "Dockerfile"])
    } else {"context": std.join("/", [context_base_directory, image])}),
    [if (image != null && (registry_name != null || registry_repository != null)) then "image"]: image_uri(image, image_tag, registry_name, registry_repository)
};

local User(uid=_docker_user_uid, gid=_docker_user_gid) = {
    "user": uid + ":" + gid
};

local userNameToUid(name) =
    _docker_user_name_to_uid[name];

local groupNameToGid(group) =
    _docker_user_group_to_gid[group];

local volume_is_named(v) =
    !std.setMember("/", v) && !std.setMember("$", v) && !std.setMember(std.char(92), v) && v != ".";

local volume_source(v) =
    if std.type(v) == 'object' then
        mapPath(v.source)
    else
        local splitted = std.split(mapPath(v), ":");
        local last = if std.length(splitted) >= 1 then splitted[std.length(splitted) - 1];
        if (last == 'rw' || last == 'ro') then
            std.join(":", splitted[:std.length(splitted) - 2])
        else
            std.join(":", splitted[:std.length(splitted) - 1]);

local apply_docker_compose_excluded_services(compose, excluded_services=_docker_compose_excluded_services) =
    if (std.objectHas(compose, 'services') && excluded_services != null && std.length(excluded_services) > 0) then
      local services = {
          [key]: compose.services[key] for key in std.objectFields(compose.services) if std.count(excluded_services, key) <= 0
      };

      compose + { services: services }
    else
      compose;

local apply_docker_compose_included_services(compose, included_services=_docker_compose_included_services) =
    if (std.objectHas(compose, 'services') && included_services != null && std.length(included_services) > 0) then
      local services = {
          [key]: compose.services[key] for key in std.objectFields(compose.services) if std.count(included_services, key) > 0
      };

      compose + { services: services }
    else
      compose;

local apply_resolve_ports_conflicts(compose) =
	compose + {['__post_processors__']+: ['ddb.feature.jsonnet.docker.apply_resolve_ports_conflicts']};

local ServiceName(name=null) = std.join("-", std.prune([_core_project_name, name]));

local _ensure_absolute(path) =
	if std.startsWith(path, '/') then
		path
	else
		_core_path_project_home + '/' + path;

local apply_volumes_mounts(volumes) = {
	[key]: volumes[key] +
	(if _docker_mount_directories != null && std.objectHas(_docker_mount_directories, key) then {
		driver: 'local',
		driver_opts: {type: 'none', o: 'bind', device: _ensure_absolute(_docker_mount_directories[key])}
     } else if _docker_mount_directory != null then {
		driver: 'local',
		driver_opts: {type: 'none', o: 'bind', device: _ensure_absolute(_docker_mount_directory + '/' + key)}
	}
	else {})
	for key in std.objectFields(volumes)
};

local Volumes(services) =
	local volumes = {
			[key]: {} for key in
			std.set(
				std.filter(volume_is_named,
					std.map(volume_source,
						std.flatMap(function (f) if std.objectHas(services[f], "volumes") then services[f].volumes else [],
							std.objectFields(services)
						)
					)
				)
			)
	};

	if !_docker_mount_disabled then
		apply_volumes_mounts(volumes)
	else
		volumes;

local NoBinaryOptionsLabels(name, options, options_condition = null, index = null) = {};
local BinaryOptionsLabels(name, options, options_condition = null, index = null) = {
    ["ddb.emit.docker:binary[" + name + "](options)" + (if index != null then "(c" + index + ")" else "")]: options,
    [if options_condition != null then "ddb.emit.docker:binary[" + name + "](options_condition)" + (if index != null then "(c" + index + ")" else "")]: options_condition
};

local NoBinaryOptions(name, options, options_condition = null, index = null) = {};
local BinaryOptions(name, options, options_condition = null, index = null) = {
    labels +: BinaryOptionsLabels(name, options, options_condition, index),
};

local NoBinaryLabels(name, workdir = null, args = null, options = null, options_condition = null, exe = null, entrypoint = null, global = null, condition = null) = {};
local BinaryLabels(name, workdir = null, args = null, options = null, options_condition = null, exe = null, entrypoint = null, global = null, condition = null) =
    local effective_global = if global == null then _docker_binary_global else global;

	{
		["ddb.emit.docker:binary[" + name + "](name)"]: name,
		[if workdir != null then "ddb.emit.docker:binary[" + name + "](workdir)"]: workdir,
		[if args != null then "ddb.emit.docker:binary[" + name + "](args)"]: args,
		[if options != null then "ddb.emit.docker:binary[" + name + "](options)"]: options,
		[if options_condition != null then "ddb.emit.docker:binary[" + name + "](options_condition)"]: options_condition,
		[if exe != null then "ddb.emit.docker:binary[" + name + "](exe)"]: exe,
		[if entrypoint != null then "ddb.emit.docker:binary[" + name + "](entrypoint)"]: entrypoint,
		[if effective_global != null then "ddb.emit.docker:binary[" + name + "](global)"]: effective_global,
		[if condition != null then "ddb.emit.docker:binary[" + name + "](condition)"]: condition
	};

local NoBinary(name, workdir = null, args = null, options = null, options_condition = null, exe = null, entrypoint=null, global=null, condition=null) = {};
local Binary(name, workdir = null, args = null, options = null, options_condition = null, exe = null, entrypoint=null, global=null, condition=null) = {
    labels +: BinaryLabels(name, workdir, args, options, options_condition, exe, entrypoint, global, condition),
};

local Networks(services, networks_names=_docker_networks_names) = {
        [key]: {
            "external": true,
            "name": if std.objectHas(networks_names, key) then networks_names[key] else key
        } for key in
        std.uniq(std.sort(
            std.filter(function (n) n != "default",
                std.flatMap(function (f) if std.objectHas(services[f], "networks") then services[f].networks else [],
                    std.objectFields(services)
                )
            )
        ))
};

local Compose(config={}, networks_names=_docker_networks_names, version=_docker_compose_version) =
    apply_resolve_ports_conflicts(apply_docker_compose_included_services(apply_docker_compose_excluded_services(config))) + {
        "version": version,
        "networks": Networks(self.services, networks_names),
        "volumes": Volumes(self.services)
    };

local NoTraefikCertLabels(hostname, service_name, certresolver=null) = {};
local TraefikCertLabels(hostname, service_name, certresolver=null) = {
    [if certresolver != null then "traefik.http.routers." + service_name + "-tls.tls.certresolver"]: certresolver,
    [if (certresolver == null && _docker_virtualhost_certresolver != null) then "traefik.http.routers." + service_name + "-tls.tls.certresolver"]: _docker_virtualhost_certresolver,
    [if (certresolver == null && _docker_virtualhost_certresolver == null) then "ddb.emit.certs:generate[" + service_name + "]"]: hostname,
};

local TraefikRoutersRuleLabels(hostname, service_name, router_rule=null, https=null) =
    local effective_https = if https != null then https else _docker_virtualhost_https;
{
    [if router_rule == null then "traefik.http.routers." + service_name + ".rule"]: "Host(`" + hostname + "`)",
    [if router_rule == null && effective_https == true then "traefik.http.routers." + service_name + "-tls.rule"]: "Host(`" + hostname + "`)",
    [if router_rule != null then "traefik.http.routers." + service_name + ".rule"]: router_rule,
    [if router_rule != null && effective_https == true then "traefik.http.routers." + service_name + "-tls.rule"]: router_rule,
};

local TraefikPathPrefixLabels(hostname, service_name, path_prefix=null, https=null) =
    local effective_https = if https != null then https else _docker_virtualhost_https;
    local effective_rule = "Host(`" + hostname + "`) && PathPrefix(`" + path_prefix + "{regex:$$|/.*}`)";
    {
        [if path_prefix != null then "traefik.http.middlewares." + service_name + "-stripprefix.stripPrefix.prefixes"]: path_prefix,
        [if path_prefix != null then "traefik.http.routers." + service_name + ".rule"]: effective_rule,
        [if path_prefix != null && effective_https == true then "traefik.http.routers." + service_name + "-tls.rule"]: effective_rule,
        [if path_prefix != null then "traefik.http.routers." + service_name + ".middlewares"]: service_name + "-stripprefix",
        [if path_prefix != null && effective_https == true then "traefik.http.routers." + service_name + "-tls.middlewares"]: service_name + "-stripprefix",
    };

local TraefikPathPrefixRedirectLabels(hostname, service_name, path_prefix=null, redirect_to_path_prefix=null, https=null) =
    local effective_https = if https != null then https else _docker_virtualhost_https;
    local effective_redirect_to_path_prefix = if redirect_to_path_prefix != null then redirect_to_path_prefix else _docker_virtualhost_redirect_to_path_prefix;
    local effective_rule = "Host(`" + hostname + "`)";
    {
        [if path_prefix != null && effective_redirect_to_path_prefix != null then "traefik.http.middlewares." + service_name + "-redirect_to_path_prefix.redirectregex.regex"]: '^https?://' + hostname + '/?$$',
        [if path_prefix != null && effective_redirect_to_path_prefix != null then "traefik.http.middlewares." + service_name + "-redirect_to_path_prefix.redirectregex.replacement"]: path_prefix,
        [if path_prefix != null && effective_redirect_to_path_prefix != null then "traefik.http.routers." + service_name + "-redirect_to_path_prefix.rule"]: effective_rule,
        [if path_prefix != null && effective_redirect_to_path_prefix != null && effective_https == true then "traefik.http.routers." + service_name + "-redirect_to_path_prefix-tls.rule"]: effective_rule,
        [if path_prefix != null && effective_redirect_to_path_prefix != null then "traefik.http.routers." + service_name + "-redirect_to_path_prefix.middlewares"]: service_name + "-redirect_to_path_prefix",
        [if path_prefix != null && effective_redirect_to_path_prefix != null && effective_https == true then "traefik.http.routers." + service_name + "-redirect_to_path_prefix-tls.middlewares"]: service_name + "-redirect_to_path_prefix",
        [if path_prefix != null && effective_redirect_to_path_prefix != null && effective_https == true then "traefik.http.routers." + service_name + "-redirect_to_path_prefix-tls.tls"]: "true",
    };

local TraefikRedirectToHttpsLabels(hostname, service_name, redirect_to_https=null) =
    local effective_redirect_to_https = if redirect_to_https != null then redirect_to_https else _docker_virtualhost_redirect_to_https;
    {
      [if effective_redirect_to_https == true then "traefik.http.routers." + service_name + ".middlewares"]: service_name + "-redirect-to-https",
      [if effective_redirect_to_https == true then "traefik.http.middlewares." + service_name + "-redirect-to-https.redirectscheme.scheme"]: "https",
    };

local NoTraefikLabels(port, hostname, name=null, certresolver=null, router_rule=null, redirect_to_https=null, https=null, path_prefix=null, redirect_to_path_prefix=null) = {};
local TraefikLabels(port, hostname, name=null, certresolver=null, router_rule=null, redirect_to_https=null, https=null, path_prefix=null, redirect_to_path_prefix=null) =
local effective_https = if https != null then https else _docker_virtualhost_https;
{
    "traefik.enable": "true",
    ["traefik.http.routers." + ServiceName(name) + ".service"]: ServiceName(name),
    [if effective_https == true then "traefik.http.routers." + ServiceName(name) + "-tls.service"]: ServiceName(name),
    [if effective_https == true then "traefik.http.routers." + ServiceName(name) + "-tls.tls"]: "true",
    ["traefik.http.services." + ServiceName(name) + ".loadbalancer.server.port"]: port
}
+ (if effective_https == true then TraefikCertLabels(hostname, ServiceName(name), certresolver) else {})
+ TraefikRoutersRuleLabels(hostname, ServiceName(name), router_rule, https)
+ TraefikPathPrefixLabels(hostname, ServiceName(name), path_prefix, https)
+ TraefikPathPrefixRedirectLabels(hostname, ServiceName(name), path_prefix, redirect_to_path_prefix, https)
+ TraefikRedirectToHttpsLabels(hostname, ServiceName(name), redirect_to_https);

local TraefikVirtualHost(port, hostname, name=null, network_id=_docker_virtualhost_network_id, certresolver=null, router_rule=null, redirect_to_https=null, https=null, path_prefix=null, redirect_to_path_prefix=null) =
  local vh = {
    labels +: TraefikLabels(port, hostname, name, certresolver, router_rule, redirect_to_https, https, path_prefix, redirect_to_path_prefix),
    networks +: [
        "default",
        network_id
    ]
  };

  vh + {networks: std.uniq(std.sort(vh.networks))};

local NoVirtualHost(port, hostname, name=null, network_id=_docker_virtualhost_network_id, certresolver=null, router_rule=null, redirect_to_https=null, https=null, path_prefix=null, redirect_to_path_prefix=null) = {};

local VirtualHost = if (_docker_virtualhost_type == "traefik" && !_docker_virtualhost_disabled) then TraefikVirtualHost else NoVirtualHost;

// XDebug 3 configuration has changed.
// Default TCP port has changed from 9000 to 9003, but we still configure it to 9000 to avoid confusion while configuring code editors.
// Set log_level=0 to workaround "Could not connect to debugging client" message (https://stackoverflow.com/questions/65213171/disable-xdebug-3-could-not-connect-message-in-cli)
local NoXDebug(version=_docker_xdebug_version, session=_docker_xdebug_session, mode=_docker_xdebug_mode) = {};
local XDebug(version=_docker_xdebug_version, session=_docker_xdebug_session, mode=_docker_xdebug_mode) =
local xdebug2_config = ["remote_enable=" + if mode != "off" then "on" else "off", "remote_autostart=off", "idekey=" + session, "remote_host=" + _docker_xdebug_host];
local xdebug3_config = ["client_host=" + _docker_xdebug_host, "log_level=0"];
{
    environment: {
        [if version == null || version == 2 then "PHP_IDE_CONFIG"]: "serverName=" + session,
        [if version == null || version == 3 then "XDEBUG_MODE"]: mode,
        [if version == null || version == 3 then "XDEBUG_SESSION"]: session,
        [if version == 2 then "XDEBUG_CONFIG"]: std.join(' ', xdebug2_config),
        [if version == 3 then "XDEBUG_CONFIG"]: std.join(' ', xdebug3_config),
        [if version == null then "XDEBUG_CONFIG"]: std.join(' ', (xdebug2_config + xdebug3_config))
    }
};

local envIndex(env=_core_env_current) =
    local indexes = std.find(env, _core_env_available);
    local index = if std.length(indexes) > 0 then indexes[0] else null;
    index;

local envIs(env) =
    env == _core_env_current;

local with(package, params={}, append=null, name=null, when=true) =
	if when then
		local effectiveName = if name == null then package.defaultName else name;
		local config = package.factory(effectiveName, params);

		if append != null && std.isFunction(append) then
			config + append(config, effectiveName)
		else if append != null then
			config + {services+: {[effectiveName]+: append}}
		else
			config
	else
		{}
	;

local merge(left, right) =
	local mergeFieldValue(left, right, field) =
    	if !std.objectHas(right, field) then
    		left[field]
    	else
    		if std.isArray(left[field]) then
    			std.uniq(std.sort((left[field] + right[field])))
    		else if std.isObject(left[field]) then
    			left[field] + right[field]
    		else
    			right[field]
    	;

	local merged = {[field]: mergeFieldValue(left, right, field) for field in std.objectFields(left)};
	merged;

local mergeAll(object_array) =
    std.foldr(merge, object_array, {});

local JoinObjectArray(object_array) =
	std.trace("JoinObjectArray(object_array) is deprecated and should be replaced with \"ddb.mergeAll(object_array)\".", mergeAll(object_array));

{
    Image: Image,
    Build: Build,
    VirtualHost: if _docker_virtualhost_disabled then NoVirtualHost else VirtualHost,
    TraefikLabels: if _docker_virtualhost_disabled then NoTraefikLabels else TraefikLabels,
    TraefikCertLabels: if _docker_virtualhost_disabled then NoTraefikCertLabels else TraefikCertLabels,
    ServiceName: ServiceName,
    Binary: if _docker_binary_disabled then NoBinary else Binary,
    BinaryLabels: if _docker_binary_disabled then NoBinaryLabels else BinaryLabels,
    BinaryOptions: if _docker_binary_disabled then NoBinaryOptions else BinaryOptions,
    BinaryOptionsLabels: if _docker_binary_disabled then NoBinaryOptionsLabels else BinaryOptionsLabels,
    XDebug: if _docker_xdebug_disabled then NoXDebug else XDebug,
    Compose: Compose,
    Volumes: Volumes,
    Expose: if _docker_expose_disabled then NoExpose else Expose,
    User: User,
    userNameToUid: userNameToUid,
    groupNameToGid: groupNameToGid,
    env: {
      index: envIndex,
      is: envIs,
      current: _core_env_current,
      available: _core_env_available
    },
	projectName: std.extVar("core.project.name"),
	domain: std.extVar("core.domain.value"),
	subDomain: function(subdomain, domain=std.extVar("core.domain.value")) std.join('.', [subdomain, domain]),
    path: path,
    JoinObjectArray: JoinObjectArray,
    with: with,
    params: {
     	value: function(params, key, default=null) if std.objectHas(params, key) then params[key] else default,
        array: function(params, key, default=[]) if std.objectHas(params, key) then if std.isArray(params[key]) then params[key] else [params[key]] else default,
    },
    File: File,
    mergeAll: mergeAll
}
