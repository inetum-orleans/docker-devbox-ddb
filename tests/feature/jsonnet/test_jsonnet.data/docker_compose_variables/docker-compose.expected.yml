version: '3.7'
services:
  db:
    build:
      context: .docker/db
    environment:
      POSTGRES_PASSWORD: biometrie
      POSTGRES_USER: biometrie
    image: gfiorleans.azurecr.io/gli-biometrie/db
    init: true
    ports:
      - "16032:5432"
    restart: "no"
    user: %uid%:%gid%
    volumes:
      - db-data:/var/lib/postgresql/data:rw
      - source: %ddb.path.project%
        target: /workdir
        type: bind
  db-test:
    build:
      context: .docker/db
    environment:
      POSTGRES_PASSWORD: biometrie
      POSTGRES_USER: biometrie
    image: gfiorleans.azurecr.io/gli-biometrie/db
    init: true
    ports:
      - "16033:5432"
    restart: "no"
    user: %uid%:%gid%
    volumes:
      - db-test-data:/var/lib/postgresql/data:rw
      - %ddb.path.project%:/workdir
  node:
    build:
      context: .docker/node
    image: gfiorleans.azurecr.io/gli-biometrie/node
    init: true
    labels:
      traefik.enable: "true"
      traefik.http.routers.gli-biometrie-tls.rule: Host(`biometrie.test`)
      traefik.http.routers.gli-biometrie-tls.service: gli-biometrie
      traefik.http.routers.gli-biometrie-tls.tls: "true"
      traefik.http.routers.gli-biometrie.rule: Host(`biometrie.test`)
      traefik.http.routers.gli-biometrie.service: gli-biometrie
      traefik.http.services.gli-biometrie.loadbalancer.server.port: '8080'
      traefik.http.routers.gli-biometrie-gulp-tls.rule: Host(`gulp.biometrie.test`)
      traefik.http.routers.gli-biometrie-gulp-tls.service: gli-biometrie-gulp
      traefik.http.routers.gli-biometrie-gulp-tls.tls: "true"
      traefik.http.routers.gli-biometrie-gulp.rule: Host(`gulp.biometrie.test`)
      traefik.http.routers.gli-biometrie-gulp.service: gli-biometrie-gulp
      traefik.http.services.gli-biometrie-gulp.loadbalancer.server.port: '3000'
      ddb.emit.certs:generate[gli-biometrie]: biometrie.test
      ddb.emit.certs:generate[gli-biometrie-gulp]: gulp.biometrie.test
    networks:
      - default
      - reverse-proxy
    restart: "no"
    user: %uid%:%gid%
    volumes:
      - %ddb.path.project%:/app:rw
      - node-cache:/home/node/.cache:rw
      - node-npm-packages:/home/node/.npm-packages:rw
  php:
    build:
      context: .docker/php
    environment:
      PHP_IDE_CONFIG: serverName=gli-biometrie
      XDEBUG_CONFIG: remote_enable=on remote_autostart=off idekey=gli-biometrie remote_host=%docker.debug.host%
    image: gfiorleans.azurecr.io/gli-biometrie/php
    init: true
    restart: "no"
    user: %uid%:%gid%
    volumes:
      - php-composer-cache:/composer/cache:rw
      - php-composer-vendor:/composer/vendor:rw
      - %ddb.path.project%/.docker/php/conf.d/php-config.ini:/usr/local/etc/php/conf.d/php-config.ini:rw
      - %ddb.path.project%:/var/www/html:rw
  web:
    build:
      context: .docker/web
    image: gfiorleans.azurecr.io/gli-biometrie/web
    init: true
    labels:
      traefik.enable: "true"
      traefik.http.routers.gli-biometrie-api-tls.rule: Host(`api.biometrie.test`)
      traefik.http.routers.gli-biometrie-api-tls.service: gli-biometrie-api
      traefik.http.routers.gli-biometrie-api-tls.tls: "true"
      traefik.http.routers.gli-biometrie-api.rule: Host(`api.biometrie.test`)
      traefik.http.routers.gli-biometrie-api.service: gli-biometrie-api
      traefik.http.services.gli-biometrie-api.loadbalancer.server.port: '80'
      ddb.emit.certs:generate[gli-biometrie-api]: api.biometrie.test
    networks:
      - default
      - reverse-proxy
    restart: "no"
    volumes:
      - %ddb.path.project%/.docker/web/nginx.conf:/etc/nginx/conf.d/default.conf:rw
      - %ddb.path.project%:/var/www/html:rw
networks:
  reverse-proxy:
    external: true
    name: reverse-proxy
volumes:
  db-data: {}
  db-test-data: {}
  node-cache: {}
  node-npm-packages: {}
  php-composer-cache: {}
  php-composer-vendor: {}